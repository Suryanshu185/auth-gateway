// Copyright Â© 2025 Prabhjot Singh Sethi, All Rights reserved
// Author: Prabhjot Singh Sethi <prabhjot.sethi@gmail.com>

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_GetUsers_FullMethodName                = "/api.User/GetUsers"
	User_CreateUser_FullMethodName              = "/api.User/CreateUser"
	User_GetUser_FullMethodName                 = "/api.User/GetUser"
	User_EnableUser_FullMethodName              = "/api.User/EnableUser"
	User_DisableUser_FullMethodName             = "/api.User/DisableUser"
	User_UpdateUser_FullMethodName              = "/api.User/UpdateUser"
	User_DeleteUser_FullMethodName              = "/api.User/DeleteUser"
	User_ListUserSessions_FullMethodName        = "/api.User/ListUserSessions"
	User_LogoutUserSession_FullMethodName       = "/api.User/LogoutUserSession"
	User_ListMyOrgUnitsWithRoles_FullMethodName = "/api.User/ListMyOrgUnitsWithRoles"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service provided to manage users
type UserClient interface {
	// Get List of existing users in a tenant
	GetUsers(ctx context.Context, in *UsersListReq, opts ...grpc.CallOption) (*UsersListResp, error)
	// Create a new user for the given tenant
	CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateResp, error)
	// Get an existing user for the given tenant
	GetUser(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetResp, error)
	// Enable an existing disabled user for the given tenant
	EnableUser(ctx context.Context, in *UserEnableReq, opts ...grpc.CallOption) (*UserEnableResp, error)
	// Disable an existing enabled user for the given tenant
	DisableUser(ctx context.Context, in *UserDisableReq, opts ...grpc.CallOption) (*UserDisableResp, error)
	// Update an existing user for the given tenant
	UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
	// Delete an existing user for the given tenant
	DeleteUser(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error)
	// List Active sessions, filter by user if provided
	ListUserSessions(ctx context.Context, in *UserSessionsListReq, opts ...grpc.CallOption) (*UserSessionsListResp, error)
	// logout user from specific session or all sessions
	LogoutUserSession(ctx context.Context, in *UserSessionLogoutReq, opts ...grpc.CallOption) (*UserSessionLogoutResp, error)
	// List org units where a specific user has roles (tenant admin within-tenant access)
	ListMyOrgUnitsWithRoles(ctx context.Context, in *MyOrgUnitsWithRolesListReq, opts ...grpc.CallOption) (*MyOrgUnitsWithRolesListResp, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUsers(ctx context.Context, in *UsersListReq, opts ...grpc.CallOption) (*UsersListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UsersListResp)
	err := c.cc.Invoke(ctx, User_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUser(ctx context.Context, in *UserCreateReq, opts ...grpc.CallOption) (*UserCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserCreateResp)
	err := c.cc.Invoke(ctx, User_CreateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUser(ctx context.Context, in *UserGetReq, opts ...grpc.CallOption) (*UserGetResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserGetResp)
	err := c.cc.Invoke(ctx, User_GetUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) EnableUser(ctx context.Context, in *UserEnableReq, opts ...grpc.CallOption) (*UserEnableResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserEnableResp)
	err := c.cc.Invoke(ctx, User_EnableUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DisableUser(ctx context.Context, in *UserDisableReq, opts ...grpc.CallOption) (*UserDisableResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDisableResp)
	err := c.cc.Invoke(ctx, User_DisableUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateUser(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserUpdateResp)
	err := c.cc.Invoke(ctx, User_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserDeleteResp)
	err := c.cc.Invoke(ctx, User_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListUserSessions(ctx context.Context, in *UserSessionsListReq, opts ...grpc.CallOption) (*UserSessionsListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSessionsListResp)
	err := c.cc.Invoke(ctx, User_ListUserSessions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) LogoutUserSession(ctx context.Context, in *UserSessionLogoutReq, opts ...grpc.CallOption) (*UserSessionLogoutResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserSessionLogoutResp)
	err := c.cc.Invoke(ctx, User_LogoutUserSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ListMyOrgUnitsWithRoles(ctx context.Context, in *MyOrgUnitsWithRolesListReq, opts ...grpc.CallOption) (*MyOrgUnitsWithRolesListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyOrgUnitsWithRolesListResp)
	err := c.cc.Invoke(ctx, User_ListMyOrgUnitsWithRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
//
// Service provided to manage users
type UserServer interface {
	// Get List of existing users in a tenant
	GetUsers(context.Context, *UsersListReq) (*UsersListResp, error)
	// Create a new user for the given tenant
	CreateUser(context.Context, *UserCreateReq) (*UserCreateResp, error)
	// Get an existing user for the given tenant
	GetUser(context.Context, *UserGetReq) (*UserGetResp, error)
	// Enable an existing disabled user for the given tenant
	EnableUser(context.Context, *UserEnableReq) (*UserEnableResp, error)
	// Disable an existing enabled user for the given tenant
	DisableUser(context.Context, *UserDisableReq) (*UserDisableResp, error)
	// Update an existing user for the given tenant
	UpdateUser(context.Context, *UserUpdateReq) (*UserUpdateResp, error)
	// Delete an existing user for the given tenant
	DeleteUser(context.Context, *UserDeleteReq) (*UserDeleteResp, error)
	// List Active sessions, filter by user if provided
	ListUserSessions(context.Context, *UserSessionsListReq) (*UserSessionsListResp, error)
	// logout user from specific session or all sessions
	LogoutUserSession(context.Context, *UserSessionLogoutReq) (*UserSessionLogoutResp, error)
	// List org units where a specific user has roles (tenant admin within-tenant access)
	ListMyOrgUnitsWithRoles(context.Context, *MyOrgUnitsWithRolesListReq) (*MyOrgUnitsWithRolesListResp, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) GetUsers(context.Context, *UsersListReq) (*UsersListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedUserServer) CreateUser(context.Context, *UserCreateReq) (*UserCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) GetUser(context.Context, *UserGetReq) (*UserGetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUserServer) EnableUser(context.Context, *UserEnableReq) (*UserEnableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableUser not implemented")
}
func (UnimplementedUserServer) DisableUser(context.Context, *UserDisableReq) (*UserDisableResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableUser not implemented")
}
func (UnimplementedUserServer) UpdateUser(context.Context, *UserUpdateReq) (*UserUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *UserDeleteReq) (*UserDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) ListUserSessions(context.Context, *UserSessionsListReq) (*UserSessionsListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUserSessions not implemented")
}
func (UnimplementedUserServer) LogoutUserSession(context.Context, *UserSessionLogoutReq) (*UserSessionLogoutResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutUserSession not implemented")
}
func (UnimplementedUserServer) ListMyOrgUnitsWithRoles(context.Context, *MyOrgUnitsWithRolesListReq) (*MyOrgUnitsWithRolesListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMyOrgUnitsWithRoles not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUsers(ctx, req.(*UsersListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*UserCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserGetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUser(ctx, req.(*UserGetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_EnableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserEnableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).EnableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_EnableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).EnableUser(ctx, req.(*UserEnableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DisableUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDisableReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DisableUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DisableUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DisableUser(ctx, req.(*UserDisableReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateUser(ctx, req.(*UserUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*UserDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListUserSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionsListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListUserSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListUserSessions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListUserSessions(ctx, req.(*UserSessionsListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_LogoutUserSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSessionLogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).LogoutUserSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_LogoutUserSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).LogoutUserSession(ctx, req.(*UserSessionLogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ListMyOrgUnitsWithRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyOrgUnitsWithRolesListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ListMyOrgUnitsWithRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ListMyOrgUnitsWithRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ListMyOrgUnitsWithRoles(ctx, req.(*MyOrgUnitsWithRolesListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsers",
			Handler:    _User_GetUsers_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _User_GetUser_Handler,
		},
		{
			MethodName: "EnableUser",
			Handler:    _User_EnableUser_Handler,
		},
		{
			MethodName: "DisableUser",
			Handler:    _User_DisableUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _User_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "ListUserSessions",
			Handler:    _User_ListUserSessions_Handler,
		},
		{
			MethodName: "LogoutUserSession",
			Handler:    _User_LogoutUserSession_Handler,
		},
		{
			MethodName: "ListMyOrgUnitsWithRoles",
			Handler:    _User_ListMyOrgUnitsWithRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
